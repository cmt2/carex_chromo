# loadPlugin("TensorPhylo", "/Users/carrietribble/.plugins")
loadPlugin("TensorPhylo")

seed(1)

# read the data
tree = readTrees("data/phy3f_pruned.tree")[1]
age  = tree.rootAge()
taxa = tree.taxa()

k    = 72
data = readCharacterDataDelimited("data/carex_chromosome_counts.tsv", stateLabels=(k + 1), type="NaturalNumbers", delimiter="\t", headers=FALSE)

mvi = 0

# rate matrix
gamma ~ dnExponential(2)
moves[++mvi] = mvScale(gamma)
gamma.setValue(6)

delta ~ dnExponential(2)
moves[++mvi] = mvScale(delta)
delta.setValue(6)

rho <- abs(0.0)

Q_chromo := fnChromosomes(k, gamma, delta, rho)

#empirical prior def
taxa <- tree.taxa()
speciation_mean <- ln( taxa.size() ) / tree.rootAge()
speciation_pr <- 1 / speciation_mean

# Each cladogenetic event type is assigned its own speciation rate.
clado_no_change ~ dnExponential(speciation_pr)
clado_fission ~ dnExponential(speciation_pr)
clado_fusion ~ dnExponential(speciation_pr)
clado_polyploid <- 0
clado_demipoly <- 0

# MCMC moves for speciation rates
moves[++mvi] = mvScale(clado_no_change, lambda=1.0, weight=3/5)
moves[++mvi] = mvScale(clado_fission, lambda=1.0, weight=3/5)
moves[++mvi] = mvScale(clado_fusion, lambda=1.0, weight=3/5)

#adding joint moves for speciation parameters
moves[++mvi] = mvUpDownScale(weight=3/5)
moves[mvi].addVariable(clado_fission, up=true)
moves[mvi].addVariable(clado_fusion, up=false)

moves[++mvi] = mvUpDownScale(weight=3/5)
moves[mvi].addVariable(clado_fission, up=true)
moves[mvi].addVariable(clado_no_change, up=false)

ne = 0
clado_events[++ne] <- [1,1,1]
clado_probs[ne]    := Probability(1.0)

# also specify the speciation rates
lambda[1] := 0

# right now no demipolyploidy
for(i in 1:k) { # this index is the number of chromosomes
	
	idx = i + 1 # because tensorphylo will drop the indexing by one
		
	if (i == 1) {

		# compute the total rate
		lambda[idx] := abs(clado_no_change + clado_fission + clado_polyploid)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * (clado_fission + clado_polyploid) / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * (clado_fission + clado_polyploid) / lambda[idx])
		
	} else if ( i + i <= k ) { # polyploidization allowed
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change + clado_fission + clado_fusion + clado_polyploid)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change / lambda[idx])
		
		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])
		
		# polyploidization
		clado_events[++ne] <- [idx, i + i + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])
		clado_events[++ne] <- [idx, idx, i + i + 1]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])

	} else if ( i < k ) { # fissuion but no polyploidy
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change + clado_fission + clado_fusion)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])		

	} else { # maximum state -- no fission or polyploidy

		# compute the total rate
		lambda[idx] := abs(clado_no_change + clado_fusion)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion / lambda[idx])		
		
	}

}

omega := fnCladogeneticProbabilityMatrix(clado_events, clado_probs, k + 1)

# diversification parameters
total_speciation := clado_no_change + clado_fission + clado_fusion + clado_polyploid + clado_demipoly
turnover ~ dnUniform(0, 1.0)
turnover.setValue(0.4)
moves[++mvi] = mvSlide(turnover, delta=0.1)

for (i in 1:(k + 1)) {
    mu[i] := turnover * total_speciation
}

moves[++mvi] = mvUpDownScale(weight=1, lambda=0.1)
moves[mvi].addVariable(clado_no_change, up=true)
moves[mvi].addVariable(clado_fission, up=true)
moves[mvi].addVariable(clado_fusion, up=true)
moves[mvi].addVariable(turnover, up=false)

frac             <- 0.4
root_frequencies <- simplex(rep(1, k + 1))
condition        <- "time"

# the distribution
x ~ dnGLHBDSP(rootAge   = age,
			  lambda    = lambda,
			  mu        = mu,
			  eta       = Q_chromo,
			  omega     = omega,
			  pi        = root_frequencies,
			  rho       = frac,
			  condition = condition,
			  taxa      = taxa,
			  nStates   = k + 1)
x.clamp(tree)
x.clampCharData(data)
x.lnProbability()

# model
my_model = model(x)

# monitors
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnModel(printgen=1, file="output/tp_newest_moves.log")
#monitors[3] = mnJointConditionalAncestralState(filename="output/ChromoSSE_anc_states.log", printgen=1, tree=tree, cdbdp=x, withStartStates=true, type="NaturalNumbers")

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
# my_mcmc.burnin(1000, tuningInterval=100)
# my_mcmc.run(generations=100, tuningInterval=10)
my_mcmc.run(generations=100)
my_mcmc.operatorSummary()



q()
