loadPlugin("TensorPhylo")

k    = 72
tree = readTrees("data/Carex_withoutSiderosticta.tree")[1]
age  = tree.rootAge()
taxa = tree.taxa()
seed(1)

# specify type of hidden model
bichromy = FALSE
hidden_clado = TRUE 

data = readCharacterDataDelimited("data/carex_chromosome_counts_expanded_withoutSiderosticta.tsv", 
                                  stateLabels=2*k +2, 
                                  type="NaturalNumbers", 
                                  delimiter="\t", 
                                  headers=FALSE)

mvi = 0

# rate matrix for chromosomes
gamma ~ dnExponential(2)
moves[++mvi] = mvScale(gamma)
gamma.setValue(6)

delta ~ dnExponential(2)
moves[++mvi] = mvScale(delta)
delta.setValue(6)

rho <- abs(0.0)

# rate matrix for hidden characters 
alpha ~ dnExponential(10)
moves[++mvi] = mvScale(alpha)

# changing to use same rate for a -> b as b -> a Aug. 23 2021
# beta ~ dnExponential(10)
# moves[++mvi] = mvScale(beta)

# set up anagenetic matrix using helper functions 
# Q_chromo := fnChromosomes(maxChromosomes = k, 
#                           gamma = gamma, 
#                           delta = delta, 
#                           rho = rho)

# Q_hidden := fnFreeBinary( [alpha, beta], rescaled=FALSE )

# # combined rate matrix
# # do this by hand instead of covarion - is this function glitchy?
# Q_combined := fnCovarionRateMatrix( [Q_chromo, Q_chromo], Q_hidden, [1,1], rescaled=FALSE )

# set up anagenetic matrix manually
# empty matrix
for(i in 1:(2*k+2)) {
	for(j in 1:(2*k+2)) {
		r[i][j] <- 0.0
	}
}

# populate rates
for(i in 1:(k+1)) {
	if (i == 1) {
	} else if (i == k + 1) {
		r[i][i-1] := delta
		r[i+k+1][i-1+k+1] := delta
	} else if (i == 2) {
		r[i][i+1] := gamma
		
		r[i+k+1][i+1+k+1] := gamma
	} else {
		r[i][i+1] := gamma
		r[i][i-1] := delta

		r[i+k+1][i+1+k+1] := gamma
		r[i+k+1][i-1+k+1] := delta
	}
	r[i][i+k+1] := alpha
	# r[i+k+1][i] := beta
	r[i+k+1][i] := alpha
}

Q_combined := fnFreeK(r, rescale=FALSE)

# cladogenetic stuff

#empirical prior def
taxa <- tree.taxa()
speciation_mean <- ln( taxa.size() ) / tree.rootAge()
speciation_pr <- 1 / speciation_mean

# Each cladogenetic event type is assigned its own speciation rate

total_speciation ~ dnExponential(speciation_pr)
moves[++mvi] = mvScale(total_speciation, lambda=0.2)
total_speciation.setValue(1.2)

relative_clado ~ dnDirichlet([1,1,1,1,1,1,1])
moves[++mvi] = mvBetaSimplex(relative_clado, alpha=10)
moves[++mvi] = mvElementSwapSimplex(relative_clado)
relative_clado.setValue(simplex([1,1,2,2,2,2,5]))

clado_rates := total_speciation * abs(relative_clado)

# 2 no change rates, 
clado_no_change_a := clado_rates[1]
clado_no_change_b := clado_rates[2]
clado_fission_a   := clado_rates[3]
clado_fission_b   := clado_rates[4]
clado_fusion_a    := clado_rates[5]
clado_fusion_b    := clado_rates[6]
chi               := clado_rates[7]

# forbid polyploidy and demepolyploidy
clado_polyploid <- 0.0
clado_demipoly <- 0.0


# write a very large loop thing that will build a matrix to account for transitions (add element for clado change between hidden using the chi rates)

ne = 0
clado_events[++ne] <- [1,1,1]
clado_probs[ne]    := Probability(1.0)

# cladogenetic transitions for the hidden state w/ 0 chromosomes
clado_events[++ne] <- [1 + k + 1,1 + k + 1,1 + k + 1]
clado_probs[ne]    := Probability(1.0)

# also specify the speciation rates
lambda[1] := 0
lambda[k+2] := 0

# right now no demipolyploidy
for(i in 1:k) { # this index is the number of chromosomes
	
	idx = i + 1 # because tensorphylo will drop the indexing by one
	idx_hidden = idx+k+1	
	if (i == 1) {

		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_polyploid + chi)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * (clado_fission_a + clado_polyploid) / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * (clado_fission_a + clado_polyploid) / lambda[idx])

		# transition between hidden states
        clado_events[++ne] <- [idx, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])
        clado_events[++ne] <- [idx, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])

        # HIDDEN
        # compute the total rate 
		lambda[idx_hidden] := abs(clado_no_change_b + clado_fission_b + clado_polyploid + chi)

        # no change
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden]
        clado_probs[ne]    := Probability(clado_no_change_b / lambda[idx_hidden])
        
        # increase by one
        clado_events[++ne] <- [idx_hidden, idx_hidden + 1, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * (clado_fission_b + clado_polyploid) / lambda[idx_hidden])
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden + 1]
        clado_probs[ne]    := Probability(0.5 * (clado_fission_b + clado_polyploid) / lambda[idx_hidden])

        # transition between hidden states
        clado_events[++ne] <- [idx_hidden, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
		
	} else if ( i + i <= k ) { # polyploidization allowed
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_fusion_a + clado_polyploid + chi)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])
		
		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		
		# polyploidization
		clado_events[++ne] <- [idx, i + i + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])
		clado_events[++ne] <- [idx, idx, i + i + 1]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])

		# transition between hidden states
        clado_events[++ne] <- [idx, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])
        clado_events[++ne] <- [idx, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])

        # HIDDEN
		# compute the total rate
		lambda[idx_hidden] := abs(clado_no_change_b + clado_fission_b + clado_fusion_b + clado_polyploid + chi)
		
		# no change
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden]
		clado_probs[ne]    := Probability(clado_no_change_b / lambda[idx_hidden])
		
		# increase by one
		clado_events[++ne] <- [idx_hidden, idx_hidden + 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_fission_b / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_b / lambda[idx_hidden])
		
		# decrease by one
		clado_events[++ne] <- [idx_hidden, idx_hidden - 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])
		
		# polyploidization
		clado_events[++ne] <- [idx_hidden, i + i + 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, i + i + 1]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx_hidden])

		# transition between hidden states
        clado_events[++ne] <- [idx_hidden, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])

	} else if ( i < k ) { # fissuion but no polyploidy
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_fusion_a + chi)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])		

		# transition between hidden states
        clado_events[++ne] <- [idx, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])
        clado_events[++ne] <- [idx, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])

		# HIDDEN
		# compute the total rate
		lambda[idx_hidden] := abs(clado_no_change_b + clado_fission_b + clado_fusion_b + chi)

		# no change
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden]
		clado_probs[ne]    := Probability(clado_no_change_b / lambda[idx_hidden])

		# increase by one
		clado_events[++ne] <- [idx_hidden, idx_hidden + 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_fission_b / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_b / lambda[idx_hidden])
		
		# decrease by one
		clado_events[++ne] <- [idx_hidden, idx_hidden - 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])	

		# transition between hidden states
        clado_events[++ne] <- [idx_hidden, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])

	} else { # maximum state -- no fission or polyploidy

		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fusion_a + chi)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])	

		# transition between hidden states
        clado_events[++ne] <- [idx, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])
        clado_events[++ne] <- [idx, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx])

		# HIDDEN	
		# compute the total rate
		lambda[idx_hidden] := abs(clado_no_change_b + clado_fusion_b + chi)

		# no change
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden]
		clado_probs[ne]    := Probability(clado_no_change_b / lambda[idx_hidden])
		
		# decrease by one
		clado_events[++ne] <- [idx_hidden, idx_hidden - 1, idx_hidden]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])
		clado_events[++ne] <- [idx_hidden, idx_hidden, idx_hidden - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_b / lambda[idx_hidden])		

		# transition between hidden states
        clado_events[++ne] <- [idx_hidden, idx, idx_hidden]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
        clado_events[++ne] <- [idx_hidden, idx_hidden, idx]
        clado_probs[ne]    := Probability(0.5 * chi / lambda[idx_hidden])
	}

}


# map the speciation rates to chromosome cladogenetic events
omega := fnCladogeneticProbabilityMatrix(clado_events, clado_probs, 2*k + 2)

# diversification parameters
# total_speciation := clado_no_change + clado_fission + clado_fusion + clado_polyploid + clado_demipoly
turnover ~ dnExponential(speciation_pr)
turnover.setValue(0.85)
moves[++mvi] = mvScale(turnover, lambda=0.5)
for (i in 1:(2*k + 2)) {
    mu[i] := turnover
}

moves[++mvi] = mvUpDownScale(weight=1, lambda=0.5)
# moves[mvi].addVariable(clado_no_change, up=true)
# moves[mvi].addVariable(clado_fission, up=true)
moves[mvi].addVariable(total_speciation, up=true)
moves[mvi].addVariable(turnover, up=true)


frac <- 0.4
root_freq_abs <-  rep(1, 2 * k + 2)
root_freq_abs[1] <- 0
root_freq_abs[1 + k + 1] <- 0
root_frequencies <- simplex(root_freq_abs)
# root_frequencies <- simplex(rep(1, 2 * k + 2))
condition        <- "time"

# the distribution
x ~ dnGLHBDSP(rootAge   = age,
              lambda    = lambda,
              mu        = mu,
              eta       = Q_combined,
              omega     = omega,
              pi        = root_frequencies,
              rho       = frac,
              condition = condition,
              taxa      = taxa,
              nStates   = 2 * (k + 1),
              nProc     = 25,
		      zeroIndex = FALSE)
x.clamp(tree)
x.clampCharData(data)
x.lnProbability()

# model
my_model = model(x)

# monitors
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnModel(printgen=1, 
	                  file="output/chromohisse_hiddenrates_run2.log",
	                  exclude = ["clado_probs", "lambda", "mu"])
monitors[3] = mnStochasticCharacterMap(glhbdsp = x, printgen = 100, filename = "output/output/chromohisse_maps_run2.log", include_simmap = true)

#monitors[3] = mnJointConditionalAncestralState(filename="output/ChromoSSE_anc_states.log", printgen=1, tree=tree, cdbdp=x, withStartStates=true, type="NaturalNumbers")

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
#my_mcmc.burnin(500, tuningInterval=50)
#my_mcmc.initializeFromCheckpoint("output/chromohisse_run1.state") # to restart from checkpoint
my_mcmc.run(generations=500, tuningInterval=10)
# my_mcmc.run(generations=500)
my_mcmc.run(generations=25000,
			checkpointInterval=100, 
			checkpointFile="output/chromohisse_hiddenrates_run2.state")
#my_mcmc.operatorSummary()



q()
