# loadPlugin("TensorPhylo", "/home/mike/repos/tensorphyloprototype/build_local")
loadPlugin("TensorPhylo")

seed(1)

# read the data
#tree = readTrees("data/aristolochia-bd.tree")[1]
#age  = tree.rootAge()
#taxa = tree.taxa()
#
#k    = 26
#data = readCharacterDataDelimited("data/aristolochia_chromosome_counts.tsv", stateLabels=k + 1, type="NaturalNumbers", delimiter="\t", headers=FALSE)
#data = data.expandCharacters(2)

tree = readTrees("data/Carex_withoutSiderosticta.tree")[1]
age  = tree.rootAge()
taxa = tree.taxa()

k    = 72
data = readCharacterDataDelimited("data/carex_chromosome_counts_withoutSiderosticta.tsv", stateLabels=k+1, type="NaturalNumbers", delimiter="\t", headers=FALSE)
data = data.expandCharacters(2)

mvi = 0

# rate matrix for chromosomes
gamma ~ dnExponential(10)
moves[++mvi] = mvScale(gamma)

delta ~ dnExponential(10)
moves[++mvi] = mvScale(delta)

rho ~ dnExponential(10)
moves[++mvi] = mvScale(rho)

Q_chromo := fnChromosomes(k, gamma, delta, rho)

# rate matrix for hidden characters 
alpha ~ dnExponential(10)
moves[++mvi] = mvScale(alpha)

beta ~ dnExponential(10)
moves[++mvi] = mvScale(beta)

Q_hidden := fnFreeBinary( [alpha, beta], rescaled=FALSE )

# combined rate matrix
# do this by hand instead of covarion - this function is glitchy 
Q_combined := fnCovarionRateMatrix( [Q_chromo, Q_chromo], Q_hidden, [1,1], rescaled=FALSE )

# cladogenetic stuff
clado_no_change ~ dnExponential(10)
moves[++mvi] = mvScale(clado_no_change)

clado_fission ~ dnExponential(10)
moves[++mvi] = mvScale(clado_fission)

clado_fusion ~ dnExponential(10)
moves[++mvi] = mvScale(clado_fusion)

clado_polyploid ~ dnExponential(10)
moves[++mvi] = mvScale(clado_polyploid)

clado_demipoly  <- abs(0.0)

# set a vector to hold the speciation rates
speciation_rates := [clado_no_change, clado_fission, clado_fusion, clado_polyploid, clado_demipoly]
total_speciation := sum(speciation_rates)

# map the speciation rates to chromosome cladogenetic events
clado_matrix := fnChromosomesCladoEventsBD(speciation_rates, [1.0], k)

lambda := clado_matrix.getSpeciationRateSumPerState()
omega  := clado_matrix.getCladogeneticProbabilityMatrix()

# diversification parameters
mu               <- rep(0.2, 2 * (k + 1))
frac             <- 1.0
root_frequencies <- simplex(rep(1, 2 * (k + 1)))
condition        <- "time"

# the distribution
x ~ dnGLHBDSP(rootAge   = age,
			  lambda    = lambda,
			  mu        = mu,
			  eta       = Q_combined,
			  omega     = omega,
			  pi        = root_frequencies,
			  rho       = frac,
			  condition = condition,
			  taxa      = taxa,
			  nStates   = 2 * (k + 1))
x.clamp(tree)
x.clampCharData(data)
x.lnProbability()

# model
my_model = model(x)

# monitors
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnModel(printgen=10, file="output/tp.log")

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
# my_mcmc.burnin(1000, tuningInterval=100)
my_mcmc.run(10000)


q()
