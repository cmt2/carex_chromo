loadPlugin("TensorPhylo", "/Users/carrietribble/Desktop/tensorphyloprototype/build/installer/lib")
#loadPlugin("TensorPhylo")

# read the data
tree = readTrees("data/Carex_withoutSiderosticta.tree")[1]
age  = tree.rootAge()
taxa = tree.taxa()

k    = 72
data = readCharacterDataDelimited("data/carex_chromosome_counts_withoutSiderosticta.tsv", stateLabels=k+1, type="NaturalNumbers", delimiter="\t", headers=FALSE)
data = data.expandCharacters(2)

mvi = 0

# rate matrix
gamma ~ dnExponential(2)
moves[++mvi] = mvScale(gamma)
gamma.setValue(6)

delta ~ dnExponential(2)
moves[++mvi] = mvScale(delta)
delta.setValue(6)

rho <- abs(0.0)

Q_chromo := fnChromosomes(k, gamma, delta, rho)

# rate matrix for hidden characters 
alpha ~ dnExponential(10)
moves[++mvi] = mvScale(alpha)

beta ~ dnExponential(10)
moves[++mvi] = mvScale(beta)

Q_hidden := fnFreeBinary( [alpha, beta], rescaled=FALSE )

# combined rate matrix
Q_combined := fnCovarionRateMatrix( [Q_chromo, Q_chromo], Q_hidden, [1,1], rescaled=FALSE )

#empirical prior def
taxa <- tree.taxa()
speciation_mean <- ln( taxa.size() ) / tree.rootAge()
speciation_pr <- 1 / speciation_mean

# Each cladogenetic event type is assigned its own speciation rate.
total_speciation ~ dnExponential(speciation_pr)
moves[++mvi] = mvScale(total_speciation, lambda=0.2)
total_speciation.setValue(1.2)

relative_clado ~ dnDirichlet([1,1,1])
moves[++mvi] = mvBetaSimplex(relative_clado, alpha=10)
moves[++mvi] = mvElementSwapSimplex(relative_clado)
relative_clado.setValue(simplex([1,5,5]))

clado_rates := total_speciation * abs(relative_clado)

clado_no_change := abs(clado_rates[1])
clado_fission   := abs(clado_rates[2])
clado_fusion    := abs(clado_rates[3])

clado_polyploid <- abs(0.0)
clado_demipoly <- abs(0.0)

speciation_rates := [clado_no_change, clado_fission, clado_fusion, clado_polyploid, clado_demipoly]
#sum_speciation := sum(speciation_rates)

# map the speciation rates to chromosome cladogenetic events
clado_matrix := fnChromosomesCladoEventsBD(speciation_rates, [1.0], k)

lambda := clado_matrix.getSpeciationRateSumPerState()
omega  := clado_matrix.getCladogeneticProbabilityMatrix()

# diversification parameters
# total_speciation := clado_no_change + clado_fission + clado_fusion + clado_polyploid + clado_demipoly
turnover ~ dnExponential(speciation_pr)
turnover.setValue(0.85)
moves[++mvi] = mvScale(turnover, lambda=0.5)
for (i in 1:(2*(k + 1))) {
    mu[i] := turnover
}

moves[++mvi] = mvUpDownScale(weight=1, lambda=0.5)
# moves[mvi].addVariable(clado_no_change, up=true)
# moves[mvi].addVariable(clado_fission, up=true)

moves[mvi].addVariable(total_speciation, up=true)
moves[mvi].addVariable(turnover, up=true)

frac             <- 0.4
root_frequencies <- simplex(rep(1, 2 * (k + 1)))
condition        <- "time"

# the distribution
x ~ dnGLHBDSP(rootAge   = age,
                 lambda    = lambda,
                 mu        = mu,
                 eta       = Q_combined,
                 omega     = omega,
                 pi        = root_frequencies,
                 rho       = frac,
                 condition = condition,
                 taxa      = taxa,
                 nStates   = 2 * (k + 1))

x.clamp(tree)
x.clampCharData(data)
x.lnProbability()

# model
my_model = model(x)

# monitors
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnModel(printgen=1, file="output/tp_dirichlet_withoutSiderosticta_run1.log")
#monitors[3] = mnJointConditionalAncestralState(filename="output/ChromoSSE_anc_states.log", printgen=1, tree=tree, cdbdp=x, withStartStates=true, type="NaturalNumbers")

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
#my_mcmc.burnin(1000, tuningInterval=100)
my_mcmc.initializeFromCheckpoint("output/tp_dirichlet_withoutSiderosticta_run1.state") # to restart from checkpoint
#my_mcmc.run(generations=1000, tuningInterval=10)
my_mcmc.run(generations=25000,
               checkpointInterval=100, 
               checkpointFile="output/tp_dirichlet_withoutSiderosticta_run1.state")
my_mcmc.operatorSummary()



q()
